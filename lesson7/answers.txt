1)Укажите отличия между PHP 5.6 и 7, которые помните (как можно больше). Какие из них Вы считаете важными и удобными?

это вопрос на опыт. скорость оптимизировали. уязвимости закрыли..
стараюсь не забивать голову этим

2)Чем отличается __autoload от spl_autoload_register?
spl это вроде какая-то стандартная библиотека.
register - видимо про автозагрузку предварительно зарегистрированных классов.

3)Что такое ECMAScript? Чем он отличается от JavaScript?

ECMAScript - это стандарт, описывающий язык JavaScript.
Его реализация в разных браузерах может быть разной.

4)Какие типы БД Вы знаете? Приведите примеры.

в мое время были сетевые, реляционные.
потом появились частные случаи, на основе реляционных.
столбцовые, вроде.
те, которые хранят объекты по индексу (как словарь)
графовые
те которые работают в оперативной памяти

5)Для чего нужны составные индексы в БД?

индексы нужны для ускорения выполнения запросов.
из Oracle помню, что есть индекс в виде дерева.
а вообще, если на основе столбца таблицы есть индекс, это ускоряет выполнение поиска по where, соединение по этому полю.
с составными индексами не работал. курс по БД тут пока не прошел.

6)Практическая задача. Спроектируйте систему новостной ленты по нижеуказанным требованиям.
Нужно: создать схему БД, указать необходимые индексы, перечислить необходимый стек технологий.
Лента новостей выводится от самой новой новости к более старым по убыванию Каждая новость имеет ленту комментариев.
Лента комментариев выводится от самого старого комментария по возрастанию.
И лента новостей, и лента комментариев имеют функционал пагинации – новости по 10 единиц, комментарии – по 25.
Комментарии могут оставлять только авторизованные пользователи.
И новостей, и комментариев может быть очень много.

СТЕК - чему учили - php, yii2, mysql

схема на рис.p6-схема БД
новости:
таблица - news
id - integer, auto increment, primary key
text - varchar
dt - timestamp
стоит сделать индекс по dt
индекс по первичному ключу делается автоматически, вроде

таблица - comments
id - integer, auto increment, primary key
text - varchar
author - про это в задаче не было, но логично предусмотреть
dt - timestamp
fk_news - integer - внешний ключ, указывает на новость, к которой относится комментарий
стоит сделать индекс по dt
индексы по первичному ключу и внешнему тоже должны быть

таблица - users
id - integer, primary key
login - varchar
hash - varchar

SELECT * FROM news ORDER BY dt;
SELECT * FROM comments ORDER BY dt DESC;
Как писать запросы с пагинацией точно не помню. Помню что есть ключевое слово Limit.
Подсматривается в интернете за пару минут.
Если новостей и комментариев может быть очень много, можно сегментировать файлы БД, в которых они хранятся, ежемесячно делять отдельные файлы или ежегодно.

7)* Усложнение задачи номер 6.
Напишите запрос, который будет отвечать за пагинацию новостей или комментариев.
Где лучше сортировать выводимые данные – на уровне БД или на уровне логики? Почему?
Сверстайте прототип ленты новостей (без поддержки логики, с AJAX-заглушками).

Как писать запросы с пагинацией точно не помню. Помню что есть ключевое слово Limit.
Подсматривается в интернете за пару минут.

<div class="news">
    <div class="news_text">ТЕКСТ НОВОСТИ</div>
    <div class="news_footer">
        <div class="news_date">10.02.2019</div>
        <div class="news_author">Хотабыч</div>
    </div>
</div>

стили:
.news {
    display: flex;
    нужно указать размещение в столбец
}

.news .news_footer{
    display: flex;
    нужно указать размещение в строку
    justify_content: space_between;
}

8)** Вам нужно организовать хранение большого списка файлов в системе CentOS. Как вы организуете структуру директорий?
тут что-то связано с количесвом возможных файлов на диске?
если нет, то возможно, имеет смысл сделать что-то типа ручного индекса. сделать подкаталоги по хешу файла, например.
чтобы поиск нужного файла по имени был быстрее в подкаталоге